---
title: "Matching and Subclassification"
---

```{r include=FALSE}
membership <- readRDS("files/membership.rds")
# Load packages
library(tidyverse)
library(dagitty)
library(ggdag)
library(ggplot2)
library(MatchIt)
library(modelsummary)
```

## DAG of online store

```{r}
online_store <- dagify(
  C ~ A,
  C ~ B,
  D ~ C,
  D ~ A,
  D ~ B,
  E ~ A,
  E ~ B,
  E ~ D,
  coords = list(x = c(A = 3, B = 4, C = 3, D = 1, E = 5),
                y = c(A = 2, B = 2, C = 3, D = 1, E = 1)),
  labels = list(A = "age",
                B = "sex",
                C = "pre_avg_purch",
                D = "card",
                E = "avg_purch")
)

# Plot DAG
ggdag(online_store) +
  theme_dag() +
  geom_dag_point(color = "lightblue") +
  geom_dag_text(color = "black") +
  geom_dag_edges(edge_color = "black") +
  geom_dag_label_repel(aes(label = label))
```

## Naive estimate of the average treatment effect

We estimate the average treatment effect by taking the difference between expected values of sales in treatment group (plus membership) and control group (non plus membership).

$ATE = E[avg\_purch|card = 1] - E[avg\_purch|card = 1] = 25.2195$

```{r}
# Expected values in treatment group
E_avgpurch_card_1 = mean(unlist(membership[membership$card == 1,"avg_purch"]))
# Expected values in control group
E_avgpurch_card_0 = mean(unlist(membership[membership$card == 0,"avg_purch"]))
# Naive estimate of ATE
E_avgpurch_card_1 - E_avgpurch_card_0
```

A naive estimate obtained by regressing `avg_purch` on `card`.
```{r}
model_naive <- lm(avg_purch ~ card, data = membership)
summary(model_naive)
```


## Matching methods for more precise estimates

#### 1. (Coarsened) Exact Matching
```{r}
# Without specifying coarsening
# (1) Matching
cem <- matchit(card ~ age + sex + pre_avg_purch,
               data = membership, 
               method = 'cem', 
               estimand = 'ATE')
# Use matched data
df_cem <- match.data(cem)

# (2) Estimation
model_cem <- lm(avg_purch ~ card, data = df_cem, weights = weights)
summary(model_cem)
```

#### 2. Nearest-Neighbor Matching
```{r}
# (1) Matching
# replace: one-to-one or one-to-many matching
nn <- matchit(card ~ age + sex + pre_avg_purch,
              data = membership,
              method = "nearest", 
              distance = "mahalanobis",
              replace = T)

# Use matched data
df_nn <- match.data(nn)

# (2) Estimation
model_nn <- lm(avg_purch ~ card, data = df_nn, weights = weights)
summary(model_nn)
```

#### 3. Inverse Probability Weighting
```{r}
# (1) Propensity scores
model_prop <- glm(card ~ age + sex + pre_avg_purch,
                  data = membership,
                  family = binomial(link = "logit"))
summary(model_prop)
# Add propensities to table
df_aug <- membership %>% mutate(propensity = predict(model_prop, type = "response"))

# Extend data by IPW scores
df_ipw <- df_aug %>% mutate(
  ipw = (card/propensity) + ((1-card) / (1-propensity)))

# (2) Estimation
model_ipw <- lm(avg_purch ~ card,
                data = df_ipw, 
                weights = ipw)
summary(model_ipw)

# Plot histogram of estimated propensities
ggplot(df_aug, aes(x = propensity)) +
  geom_histogram(alpha = .8, color = "white", bins=30)
```

#### 4. Comparison of methods
```{r}
# Summary of naive and matching methods
modelsummary::modelsummary(list("Naive" = model_naive,
                                "CEM"   = model_cem,
                                "NN"    = model_nn,
                                "IPW"   = model_ipw))
```



